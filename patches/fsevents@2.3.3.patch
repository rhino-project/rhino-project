diff --git a/fsevents.js b/fsevents.js
index 198da98e7693d57f0f786b01327e6fcb9d06cd2b..d0960747e0255775425d207af2d15c93bc1b29a2 100644
--- a/fsevents.js
+++ b/fsevents.js
@@ -7,31 +7,41 @@
 "use strict";
 
 if (process.platform !== "darwin") {
-  throw new Error(`Module 'fsevents' is not compatible with platform '${process.platform}'`);
+  throw new Error(
+    `Module 'fsevents' is not compatible with platform '${process.platform}'`
+  );
 }
 
-const Native = require("./fsevents.node");
+const Native = window.require("./fsevents.node");
 const events = Native.constants;
 
 function watch(path, since, handler) {
   if (typeof path !== "string") {
-    throw new TypeError(`fsevents argument 1 must be a string and not a ${typeof path}`);
+    throw new TypeError(
+      `fsevents argument 1 must be a string and not a ${typeof path}`
+    );
   }
   if ("function" === typeof since && "undefined" === typeof handler) {
     handler = since;
     since = Native.flags.SinceNow;
   }
   if (typeof since !== "number") {
-    throw new TypeError(`fsevents argument 2 must be a number and not a ${typeof since}`);
+    throw new TypeError(
+      `fsevents argument 2 must be a number and not a ${typeof since}`
+    );
   }
   if (typeof handler !== "function") {
-    throw new TypeError(`fsevents argument 3 must be a function and not a ${typeof handler}`);
+    throw new TypeError(
+      `fsevents argument 3 must be a function and not a ${typeof handler}`
+    );
   }
 
   let instance = Native.start(Native.global, path, since, handler);
   if (!instance) throw new Error(`could not watch: ${path}`);
   return () => {
-    const result = instance ? Promise.resolve(instance).then(Native.stop) : Promise.resolve(undefined);
+    const result = instance
+      ? Promise.resolve(instance).then(Native.stop)
+      : Promise.resolve(undefined);
     instance = undefined;
     return result;
   };
@@ -50,7 +60,7 @@ function getInfo(path, flags) {
 function getFileType(flags) {
   if (events.ItemIsFile & flags) return "file";
   if (events.ItemIsDir & flags) return "directory";
-  if (events.MustScanSubDirs & flags) return "directory"; 
+  if (events.MustScanSubDirs & flags) return "directory";
   if (events.ItemIsSymlink & flags) return "symlink";
 }
 function anyIsTrue(obj) {
