// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ModelFormField > renders errors for Array > Reference Attribute > Not creatable 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Array &gt; Reference Attribute &gt; Not creatable
  </label>
  <div
    className="model-nested model-nested-organization"
  >
    <div
      className="model-table model-table-organization"
    >
      <table
        className="table table-striped table-hover"
        role="table"
        width="100%"
      >
        <thead
          className="model-table-header model-table-header-organization"
        >
          <tr
            role="row"
          >
            <th
              colSpan={1}
              role="columnheader"
            >
               
            </th>
          </tr>
        </thead>
        <tbody
          className="model-table-body model-table-body-organization"
          role="rowgroup"
        />
      </table>
    </div>
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Array > Reference Attribute > Not destroyable 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Array &gt; Reference Attribute &gt; Not destroyable
  </label>
  <div
    className="model-nested model-nested-organization"
  >
    <button
      className="btn btn-outline-secondary"
      onClick={[Function]}
      type="button"
    >
      <svg
        className="me-1"
        fill="currentColor"
        height={32}
        style={
          {
            "height": "1rem",
            "width": "1rem",
          }
        }
        width={32}
      >
        <use
          xlinkHref="/src/assets/images/bootstrap-icons.svg#plus"
        />
      </svg>
    </button>
    <div
      className="model-table model-table-organization"
    >
      <table
        className="table table-striped table-hover"
        role="table"
        width="100%"
      >
        <thead
          className="model-table-header model-table-header-organization"
        >
          <tr
            role="row"
          >
            <th
              colSpan={1}
              role="columnheader"
            >
               
            </th>
          </tr>
        </thead>
        <tbody
          className="model-table-body model-table-body-organization"
          role="rowgroup"
        />
      </table>
    </div>
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Array > Reference Attribute > Not updatable 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Array &gt; Reference Attribute &gt; Not updatable
  </label>
  <div
    className="model-nested model-nested-organization"
  >
    <button
      className="btn btn-outline-secondary"
      onClick={[Function]}
      type="button"
    >
      <svg
        className="me-1"
        fill="currentColor"
        height={32}
        style={
          {
            "height": "1rem",
            "width": "1rem",
          }
        }
        width={32}
      >
        <use
          xlinkHref="/src/assets/images/bootstrap-icons.svg#plus"
        />
      </svg>
    </button>
    <div
      className="model-table model-table-organization"
    >
      <table
        className="table table-striped table-hover"
        role="table"
        width="100%"
      >
        <thead
          className="model-table-header model-table-header-organization"
        >
          <tr
            role="row"
          >
            <th
              colSpan={1}
              role="columnheader"
            >
               
            </th>
          </tr>
        </thead>
        <tbody
          className="model-table-body model-table-body-organization"
          role="rowgroup"
        />
      </table>
    </div>
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Array > Reference Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Array &gt; Reference Attribute
  </label>
  <div
    className="model-nested model-nested-organization"
  >
    <button
      className="btn btn-outline-secondary"
      onClick={[Function]}
      type="button"
    >
      <svg
        className="me-1"
        fill="currentColor"
        height={32}
        style={
          {
            "height": "1rem",
            "width": "1rem",
          }
        }
        width={32}
      >
        <use
          xlinkHref="/src/assets/images/bootstrap-icons.svg#plus"
        />
      </svg>
    </button>
    <div
      className="model-table model-table-organization"
    >
      <table
        className="table table-striped table-hover"
        role="table"
        width="100%"
      >
        <thead
          className="model-table-header model-table-header-organization"
        >
          <tr
            role="row"
          >
            <th
              colSpan={1}
              role="columnheader"
            >
               
            </th>
          </tr>
        </thead>
        <tbody
          className="model-table-body model-table-body-organization"
          role="rowgroup"
        />
      </table>
    </div>
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Array > String Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Array &gt; String Attribute
  </label>
  <div
    className="rbt is-invalid is-invalid"
    style={
      {
        "outline": "none",
        "position": "relative",
      }
    }
    tabIndex={-1}
  >
    <div
      className="rbt-input-multi form-control rbt-input is-invalid"
      onClick={[Function]}
      onFocus={[Function]}
      tabIndex={-1}
    >
      <div
        className="rbt-input-wrapper"
      >
        <div
          style={
            {
              "display": "flex",
              "flex": 1,
              "height": "100%",
              "position": "relative",
            }
          }
        >
          <input
            aria-autocomplete="both"
            aria-expanded={false}
            aria-haspopup="listbox"
            aria-multiselectable={true}
            autoComplete="off"
            className="rbt-input-main"
            onBlur={[Function]}
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            role="combobox"
            style={
              {
                "backgroundColor": "transparent",
                "border": 0,
                "boxShadow": "none",
                "cursor": "inherit",
                "outline": "none",
                "padding": 0,
                "width": "100%",
                "zIndex": 1,
              }
            }
            type="text"
            value=""
          />
          <input
            aria-hidden={true}
            className="rbt-input-hint"
            readOnly={true}
            style={
              {
                "backgroundColor": "transparent",
                "borderColor": "transparent",
                "boxShadow": "none",
                "color": "rgba(0, 0, 0, 0.54)",
                "left": 0,
                "pointerEvents": "none",
                "position": "absolute",
                "top": 0,
                "width": "100%",
              }
            }
            tabIndex={-1}
            value=""
          />
        </div>
      </div>
    </div>
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Boolean Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Boolean Attribute
  </label>
  <input
    attribute={
      {
        "readableName": "Boolean Attribute",
        "type": "boolean",
      }
    }
    checked=""
    className="is-invalid form-check-input"
    error="display-error"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="checkbox"
    value=""
  />
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Date Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Date Attribute
  </label>
  <div
    className="react-datepicker-wrapper d-block is-invalid"
  >
    <div
      className="react-datepicker__input-container"
    >
      <input
        className="d-block form-control is-invalid"
        disabled={false}
        id="test"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        readOnly={false}
        type="text"
        value=""
      />
    </div>
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for DateTime Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    DateTime Attribute
  </label>
  <div
    className="react-datepicker-wrapper d-block is-invalid"
  >
    <div
      className="react-datepicker__input-container"
    >
      <input
        className="d-block form-control is-invalid"
        disabled={false}
        id="test"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        readOnly={false}
        type="text"
        value=""
      />
    </div>
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Decimal Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Decimal Attribute
  </label>
  <input
    aria-invalid={true}
    autoComplete="off"
    className="is-invalid form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="number"
    value=""
  />
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Decimal Attribute Currency 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Decimal Attribute Currency
  </label>
  <div
    className="is-invalid input-group"
  >
    <span
      className="input-group-text"
    >
      $
    </span>
    <input
      attribute={
        {
          "format": "currency",
          "readableName": "Decimal Attribute Currency",
          "type": "decimal",
        }
      }
      className="is-invalid form-control"
      id="test-123"
      onChange={[Function]}
      path="test"
      resource={
        {
          "test": "",
        }
      }
      type="text"
      value=""
    />
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Float Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Float Attribute
  </label>
  <input
    aria-invalid={true}
    autoComplete="off"
    className="is-invalid form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="number"
    value=""
  />
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Float Attribute Currency 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Float Attribute Currency
  </label>
  <div
    className="is-invalid input-group"
  >
    <span
      className="input-group-text"
    >
      $
    </span>
    <input
      attribute={
        {
          "format": "currency",
          "readableName": "Float Attribute Currency",
          "type": "float",
        }
      }
      className="is-invalid form-control"
      id="test-123"
      onChange={[Function]}
      path="test"
      resource={
        {
          "test": "",
        }
      }
      type="text"
      value=""
    />
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Integer Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Integer Attribute
  </label>
  <input
    aria-invalid={true}
    autoComplete="off"
    className="is-invalid form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="number"
    value=""
  />
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Integer Attribute Select 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Integer Attribute Select
  </label>
  <select
    className="form-select"
    error="display-error"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    value={-1}
  >
    <option
      disabled={true}
      value={-1}
    >
      Integer Attribute Select...
    </option>
  </select>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Number Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Number Attribute
  </label>
  <input
    aria-invalid={true}
    autoComplete="off"
    className="is-invalid form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="number"
    value=""
  />
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Number Attribute Currency 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Number Attribute Currency
  </label>
  <div
    className="is-invalid input-group"
  >
    <span
      className="input-group-text"
    >
      $
    </span>
    <input
      attribute={
        {
          "format": "currency",
          "readableName": "Number Attribute Currency",
          "type": "number",
        }
      }
      className="is-invalid form-control"
      id="test-123"
      onChange={[Function]}
      path="test"
      resource={
        {
          "test": "",
        }
      }
      type="text"
      value=""
    />
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Phone Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Phone Attribute
  </label>
  <div
    className="is-invalid react-tel-input "
    onKeyDown={[Function]}
    style={{}}
  >
    <div
      className="special-label"
    >
      Phone
    </div>
    <input
      className="form-control "
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onCopy={[Function]}
      onDoubleClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="1 (702) 123-4567"
      style={{}}
      type="tel"
      value="+1"
    />
    <div
      className="flag-dropdown "
      style={{}}
    >
      <div
        aria-haspopup="listbox"
        className="selected-flag"
        onClick={[Function]}
        role="button"
        tabIndex="0"
        title="United States: + 1"
      >
        <div
          className="flag us"
        >
          <div
            className="arrow"
          />
        </div>
      </div>
    </div>
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Reference > Attachment Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Reference &gt; Attachment Attribute
  </label>
  <div
    className="rbt is-invalid _typeahead_e2d666 is-invalid"
    style={
      {
        "outline": "none",
        "position": "relative",
      }
    }
    tabIndex={-1}
  >
    <div
      style={
        {
          "display": "flex",
          "flex": 1,
          "height": "100%",
          "position": "relative",
        }
      }
    >
      <input
        aria-autocomplete="both"
        aria-expanded={false}
        aria-haspopup="listbox"
        autoComplete="off"
        className="rbt-input-main form-control rbt-input is-invalid"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        role="combobox"
        type="text"
        value=""
      />
      <input
        aria-hidden={true}
        className="rbt-input-hint"
        readOnly={true}
        style={
          {
            "backgroundColor": "transparent",
            "borderColor": "transparent",
            "boxShadow": "none",
            "color": "rgba(0, 0, 0, 0.54)",
            "left": 0,
            "pointerEvents": "none",
            "position": "absolute",
            "top": 0,
            "width": "100%",
          }
        }
        tabIndex={-1}
        value=""
      />
    </div>
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Reference Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Reference Attribute
  </label>
  <div
    className="rbt is-invalid _typeahead_e2d666 is-invalid"
    style={
      {
        "outline": "none",
        "position": "relative",
      }
    }
    tabIndex={-1}
  >
    <div
      style={
        {
          "display": "flex",
          "flex": 1,
          "height": "100%",
          "position": "relative",
        }
      }
    >
      <input
        aria-autocomplete="both"
        aria-expanded={false}
        aria-haspopup="listbox"
        autoComplete="off"
        className="rbt-input-main form-control rbt-input is-invalid"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        role="combobox"
        type="text"
        value=""
      />
      <input
        aria-hidden={true}
        className="rbt-input-hint"
        readOnly={true}
        style={
          {
            "backgroundColor": "transparent",
            "borderColor": "transparent",
            "boxShadow": "none",
            "color": "rgba(0, 0, 0, 0.54)",
            "left": 0,
            "pointerEvents": "none",
            "position": "absolute",
            "top": 0,
            "width": "100%",
          }
        }
        tabIndex={-1}
        value=""
      />
    </div>
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for String > Enum Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    String &gt; Enum Attribute
  </label>
  <select
    aria-invalid={true}
    className="is-invalid form-select"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    value={-1}
  >
    <option
      value="y"
    >
      y
    </option>
    <option
      value="n"
    >
      n
    </option>
    <option
      disabled={true}
      value={-1}
    >
      String &gt; Enum Attribute...
    </option>
  </select>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for String Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    String Attribute
  </label>
  <input
    aria-invalid={true}
    attribute={
      {
        "readableName": "String Attribute",
        "type": "string",
      }
    }
    autoComplete="off"
    className="is-invalid form-control"
    error="display-error"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="text"
    value=""
  />
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for String Attribute 2`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    String Attribute
  </label>
  <input
    aria-invalid={true}
    attribute={
      {
        "readableName": "String Attribute",
        "type": "string",
      }
    }
    autoComplete="off"
    className="is-invalid form-control"
    error="display-error"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="text"
    value=""
  />
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Text Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Text Attribute
  </label>
  <textarea
    aria-invalid={true}
    attribute={
      {
        "readableName": "Text Attribute",
        "type": "text",
      }
    }
    className="is-invalid form-control"
    error="display-error"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    value=""
  />
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for Time Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Time Attribute
  </label>
  <div
    className="react-datepicker-wrapper d-block is-invalid"
  >
    <div
      className="react-datepicker__input-container"
    >
      <input
        className="d-block form-control is-invalid"
        disabled={false}
        id="test"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        readOnly={false}
        type="text"
        value=""
      />
    </div>
  </div>
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders errors for undefined 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  />
  <input
    aria-invalid={true}
    attribute={{}}
    autoComplete="off"
    className="is-invalid form-control"
    error="display-error"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="text"
    value=""
  />
  <div
    className="invalid-feedback"
  >
    display-error
  </div>
</div>
`;

exports[`ModelFormField > renders input for Array > Reference Attribute > Not creatable 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Array &gt; Reference Attribute &gt; Not creatable
  </label>
  <div
    className="model-nested model-nested-organization"
  >
    <div
      className="model-table model-table-organization"
    >
      <table
        className="table table-striped table-hover"
        role="table"
        width="100%"
      >
        <thead
          className="model-table-header model-table-header-organization"
        >
          <tr
            role="row"
          >
            <th
              colSpan={1}
              role="columnheader"
            >
               
            </th>
          </tr>
        </thead>
        <tbody
          className="model-table-body model-table-body-organization"
          role="rowgroup"
        />
      </table>
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders input for Array > Reference Attribute > Not destroyable 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Array &gt; Reference Attribute &gt; Not destroyable
  </label>
  <div
    className="model-nested model-nested-organization"
  >
    <button
      className="btn btn-outline-secondary"
      onClick={[Function]}
      type="button"
    >
      <svg
        className="me-1"
        fill="currentColor"
        height={32}
        style={
          {
            "height": "1rem",
            "width": "1rem",
          }
        }
        width={32}
      >
        <use
          xlinkHref="/src/assets/images/bootstrap-icons.svg#plus"
        />
      </svg>
    </button>
    <div
      className="model-table model-table-organization"
    >
      <table
        className="table table-striped table-hover"
        role="table"
        width="100%"
      >
        <thead
          className="model-table-header model-table-header-organization"
        >
          <tr
            role="row"
          >
            <th
              colSpan={1}
              role="columnheader"
            >
               
            </th>
          </tr>
        </thead>
        <tbody
          className="model-table-body model-table-body-organization"
          role="rowgroup"
        />
      </table>
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders input for Array > Reference Attribute > Not updatable 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Array &gt; Reference Attribute &gt; Not updatable
  </label>
  <div
    className="model-nested model-nested-organization"
  >
    <button
      className="btn btn-outline-secondary"
      onClick={[Function]}
      type="button"
    >
      <svg
        className="me-1"
        fill="currentColor"
        height={32}
        style={
          {
            "height": "1rem",
            "width": "1rem",
          }
        }
        width={32}
      >
        <use
          xlinkHref="/src/assets/images/bootstrap-icons.svg#plus"
        />
      </svg>
    </button>
    <div
      className="model-table model-table-organization"
    >
      <table
        className="table table-striped table-hover"
        role="table"
        width="100%"
      >
        <thead
          className="model-table-header model-table-header-organization"
        >
          <tr
            role="row"
          >
            <th
              colSpan={1}
              role="columnheader"
            >
               
            </th>
          </tr>
        </thead>
        <tbody
          className="model-table-body model-table-body-organization"
          role="rowgroup"
        />
      </table>
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders input for Array > Reference Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Array &gt; Reference Attribute
  </label>
  <div
    className="model-nested model-nested-organization"
  >
    <button
      className="btn btn-outline-secondary"
      onClick={[Function]}
      type="button"
    >
      <svg
        className="me-1"
        fill="currentColor"
        height={32}
        style={
          {
            "height": "1rem",
            "width": "1rem",
          }
        }
        width={32}
      >
        <use
          xlinkHref="/src/assets/images/bootstrap-icons.svg#plus"
        />
      </svg>
    </button>
    <div
      className="model-table model-table-organization"
    >
      <table
        className="table table-striped table-hover"
        role="table"
        width="100%"
      >
        <thead
          className="model-table-header model-table-header-organization"
        >
          <tr
            role="row"
          >
            <th
              colSpan={1}
              role="columnheader"
            >
               
            </th>
          </tr>
        </thead>
        <tbody
          className="model-table-body model-table-body-organization"
          role="rowgroup"
        />
      </table>
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders input for Array > String Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Array &gt; String Attribute
  </label>
  <div
    className="rbt"
    style={
      {
        "outline": "none",
        "position": "relative",
      }
    }
    tabIndex={-1}
  >
    <div
      className="rbt-input-multi form-control rbt-input"
      onClick={[Function]}
      onFocus={[Function]}
      tabIndex={-1}
    >
      <div
        className="rbt-input-wrapper"
      >
        <div
          style={
            {
              "display": "flex",
              "flex": 1,
              "height": "100%",
              "position": "relative",
            }
          }
        >
          <input
            aria-autocomplete="both"
            aria-expanded={false}
            aria-haspopup="listbox"
            aria-multiselectable={true}
            autoComplete="off"
            className="rbt-input-main"
            onBlur={[Function]}
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            role="combobox"
            style={
              {
                "backgroundColor": "transparent",
                "border": 0,
                "boxShadow": "none",
                "cursor": "inherit",
                "outline": "none",
                "padding": 0,
                "width": "100%",
                "zIndex": 1,
              }
            }
            type="text"
            value=""
          />
          <input
            aria-hidden={true}
            className="rbt-input-hint"
            readOnly={true}
            style={
              {
                "backgroundColor": "transparent",
                "borderColor": "transparent",
                "boxShadow": "none",
                "color": "rgba(0, 0, 0, 0.54)",
                "left": 0,
                "pointerEvents": "none",
                "position": "absolute",
                "top": 0,
                "width": "100%",
              }
            }
            tabIndex={-1}
            value=""
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders input for Boolean Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Boolean Attribute
  </label>
  <input
    attribute={
      {
        "readableName": "Boolean Attribute",
        "type": "boolean",
      }
    }
    checked=""
    className="form-check-input"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="checkbox"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders input for Date Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Date Attribute
  </label>
  <div
    className="react-datepicker-wrapper d-block"
  >
    <div
      className="react-datepicker__input-container"
    >
      <input
        className="d-block form-control"
        disabled={false}
        id="test"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        readOnly={false}
        type="text"
        value=""
      />
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders input for DateTime Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    DateTime Attribute
  </label>
  <div
    className="react-datepicker-wrapper d-block"
  >
    <div
      className="react-datepicker__input-container"
    >
      <input
        className="d-block form-control"
        disabled={false}
        id="test"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        readOnly={false}
        type="text"
        value=""
      />
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders input for Decimal Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Decimal Attribute
  </label>
  <input
    aria-invalid={false}
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="number"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders input for Decimal Attribute Currency 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Decimal Attribute Currency
  </label>
  <div
    className="input-group"
  >
    <span
      className="input-group-text"
    >
      $
    </span>
    <input
      attribute={
        {
          "format": "currency",
          "readableName": "Decimal Attribute Currency",
          "type": "decimal",
        }
      }
      className="form-control"
      id="test-123"
      onChange={[Function]}
      path="test"
      resource={
        {
          "test": "",
        }
      }
      type="text"
      value=""
    />
  </div>
</div>
`;

exports[`ModelFormField > renders input for Float Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Float Attribute
  </label>
  <input
    aria-invalid={false}
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="number"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders input for Float Attribute Currency 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Float Attribute Currency
  </label>
  <div
    className="input-group"
  >
    <span
      className="input-group-text"
    >
      $
    </span>
    <input
      attribute={
        {
          "format": "currency",
          "readableName": "Float Attribute Currency",
          "type": "float",
        }
      }
      className="form-control"
      id="test-123"
      onChange={[Function]}
      path="test"
      resource={
        {
          "test": "",
        }
      }
      type="text"
      value=""
    />
  </div>
</div>
`;

exports[`ModelFormField > renders input for Integer Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Integer Attribute
  </label>
  <input
    aria-invalid={false}
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="number"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders input for Integer Attribute Select 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Integer Attribute Select
  </label>
  <select
    className="form-select"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    value={-1}
  >
    <option
      disabled={true}
      value={-1}
    >
      Integer Attribute Select...
    </option>
  </select>
</div>
`;

exports[`ModelFormField > renders input for Number Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Number Attribute
  </label>
  <input
    aria-invalid={false}
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="number"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders input for Number Attribute Currency 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Number Attribute Currency
  </label>
  <div
    className="input-group"
  >
    <span
      className="input-group-text"
    >
      $
    </span>
    <input
      attribute={
        {
          "format": "currency",
          "readableName": "Number Attribute Currency",
          "type": "number",
        }
      }
      className="form-control"
      id="test-123"
      onChange={[Function]}
      path="test"
      resource={
        {
          "test": "",
        }
      }
      type="text"
      value=""
    />
  </div>
</div>
`;

exports[`ModelFormField > renders input for Phone Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Phone Attribute
  </label>
  <div
    className=" react-tel-input "
    onKeyDown={[Function]}
    style={{}}
  >
    <div
      className="special-label"
    >
      Phone
    </div>
    <input
      className="form-control "
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onCopy={[Function]}
      onDoubleClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="1 (702) 123-4567"
      style={{}}
      type="tel"
      value="+1"
    />
    <div
      className="flag-dropdown "
      style={{}}
    >
      <div
        aria-haspopup="listbox"
        className="selected-flag"
        onClick={[Function]}
        role="button"
        tabIndex="0"
        title="United States: + 1"
      >
        <div
          className="flag us"
        >
          <div
            className="arrow"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders input for Reference > Attachment Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Reference &gt; Attachment Attribute
  </label>
  <div
    className="rbt _typeahead_e2d666"
    style={
      {
        "outline": "none",
        "position": "relative",
      }
    }
    tabIndex={-1}
  >
    <div
      style={
        {
          "display": "flex",
          "flex": 1,
          "height": "100%",
          "position": "relative",
        }
      }
    >
      <input
        aria-autocomplete="both"
        aria-expanded={false}
        aria-haspopup="listbox"
        autoComplete="off"
        className="rbt-input-main form-control rbt-input"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        role="combobox"
        type="text"
        value=""
      />
      <input
        aria-hidden={true}
        className="rbt-input-hint"
        readOnly={true}
        style={
          {
            "backgroundColor": "transparent",
            "borderColor": "transparent",
            "boxShadow": "none",
            "color": "rgba(0, 0, 0, 0.54)",
            "left": 0,
            "pointerEvents": "none",
            "position": "absolute",
            "top": 0,
            "width": "100%",
          }
        }
        tabIndex={-1}
        value=""
      />
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders input for Reference Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Reference Attribute
  </label>
  <div
    className="rbt _typeahead_e2d666"
    style={
      {
        "outline": "none",
        "position": "relative",
      }
    }
    tabIndex={-1}
  >
    <div
      style={
        {
          "display": "flex",
          "flex": 1,
          "height": "100%",
          "position": "relative",
        }
      }
    >
      <input
        aria-autocomplete="both"
        aria-expanded={false}
        aria-haspopup="listbox"
        autoComplete="off"
        className="rbt-input-main form-control rbt-input"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        role="combobox"
        type="text"
        value=""
      />
      <input
        aria-hidden={true}
        className="rbt-input-hint"
        readOnly={true}
        style={
          {
            "backgroundColor": "transparent",
            "borderColor": "transparent",
            "boxShadow": "none",
            "color": "rgba(0, 0, 0, 0.54)",
            "left": 0,
            "pointerEvents": "none",
            "position": "absolute",
            "top": 0,
            "width": "100%",
          }
        }
        tabIndex={-1}
        value=""
      />
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders input for String > Enum Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    String &gt; Enum Attribute
  </label>
  <select
    aria-invalid={false}
    className="form-select"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    value={-1}
  >
    <option
      value="y"
    >
      y
    </option>
    <option
      value="n"
    >
      n
    </option>
    <option
      disabled={true}
      value={-1}
    >
      String &gt; Enum Attribute...
    </option>
  </select>
</div>
`;

exports[`ModelFormField > renders input for String Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    String Attribute
  </label>
  <input
    aria-invalid={false}
    attribute={
      {
        "readableName": "String Attribute",
        "type": "string",
      }
    }
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="text"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders input for String Attribute 2`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    String Attribute
  </label>
  <input
    aria-invalid={false}
    attribute={
      {
        "readableName": "String Attribute",
        "type": "string",
      }
    }
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="text"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders input for Text Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Text Attribute
  </label>
  <textarea
    aria-invalid={false}
    attribute={
      {
        "readableName": "Text Attribute",
        "type": "text",
      }
    }
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    value=""
  />
</div>
`;

exports[`ModelFormField > renders input for Time Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  >
    Time Attribute
  </label>
  <div
    className="react-datepicker-wrapper d-block"
  >
    <div
      className="react-datepicker__input-container"
    >
      <input
        className="d-block form-control"
        disabled={false}
        id="test"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        readOnly={false}
        type="text"
        value=""
      />
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders input for undefined 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label form-label"
    htmlFor="test"
  />
  <input
    aria-invalid={false}
    attribute={{}}
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="text"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders required for Array > Reference Attribute > Not creatable 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Array &gt; Reference Attribute &gt; Not creatable
  </label>
  <div
    className="model-nested model-nested-organization"
  >
    <div
      className="model-table model-table-organization"
    >
      <table
        className="table table-striped table-hover"
        role="table"
        width="100%"
      >
        <thead
          className="model-table-header model-table-header-organization"
        >
          <tr
            role="row"
          >
            <th
              colSpan={1}
              role="columnheader"
            >
               
            </th>
          </tr>
        </thead>
        <tbody
          className="model-table-body model-table-body-organization"
          role="rowgroup"
        />
      </table>
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders required for Array > Reference Attribute > Not destroyable 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Array &gt; Reference Attribute &gt; Not destroyable
  </label>
  <div
    className="model-nested model-nested-organization"
  >
    <button
      className="btn btn-outline-secondary"
      onClick={[Function]}
      type="button"
    >
      <svg
        className="me-1"
        fill="currentColor"
        height={32}
        style={
          {
            "height": "1rem",
            "width": "1rem",
          }
        }
        width={32}
      >
        <use
          xlinkHref="/src/assets/images/bootstrap-icons.svg#plus"
        />
      </svg>
    </button>
    <div
      className="model-table model-table-organization"
    >
      <table
        className="table table-striped table-hover"
        role="table"
        width="100%"
      >
        <thead
          className="model-table-header model-table-header-organization"
        >
          <tr
            role="row"
          >
            <th
              colSpan={1}
              role="columnheader"
            >
               
            </th>
          </tr>
        </thead>
        <tbody
          className="model-table-body model-table-body-organization"
          role="rowgroup"
        />
      </table>
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders required for Array > Reference Attribute > Not updatable 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Array &gt; Reference Attribute &gt; Not updatable
  </label>
  <div
    className="model-nested model-nested-organization"
  >
    <button
      className="btn btn-outline-secondary"
      onClick={[Function]}
      type="button"
    >
      <svg
        className="me-1"
        fill="currentColor"
        height={32}
        style={
          {
            "height": "1rem",
            "width": "1rem",
          }
        }
        width={32}
      >
        <use
          xlinkHref="/src/assets/images/bootstrap-icons.svg#plus"
        />
      </svg>
    </button>
    <div
      className="model-table model-table-organization"
    >
      <table
        className="table table-striped table-hover"
        role="table"
        width="100%"
      >
        <thead
          className="model-table-header model-table-header-organization"
        >
          <tr
            role="row"
          >
            <th
              colSpan={1}
              role="columnheader"
            >
               
            </th>
          </tr>
        </thead>
        <tbody
          className="model-table-body model-table-body-organization"
          role="rowgroup"
        />
      </table>
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders required for Array > Reference Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Array &gt; Reference Attribute
  </label>
  <div
    className="model-nested model-nested-organization"
  >
    <button
      className="btn btn-outline-secondary"
      onClick={[Function]}
      type="button"
    >
      <svg
        className="me-1"
        fill="currentColor"
        height={32}
        style={
          {
            "height": "1rem",
            "width": "1rem",
          }
        }
        width={32}
      >
        <use
          xlinkHref="/src/assets/images/bootstrap-icons.svg#plus"
        />
      </svg>
    </button>
    <div
      className="model-table model-table-organization"
    >
      <table
        className="table table-striped table-hover"
        role="table"
        width="100%"
      >
        <thead
          className="model-table-header model-table-header-organization"
        >
          <tr
            role="row"
          >
            <th
              colSpan={1}
              role="columnheader"
            >
               
            </th>
          </tr>
        </thead>
        <tbody
          className="model-table-body model-table-body-organization"
          role="rowgroup"
        />
      </table>
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders required for Array > String Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Array &gt; String Attribute
  </label>
  <div
    className="rbt"
    style={
      {
        "outline": "none",
        "position": "relative",
      }
    }
    tabIndex={-1}
  >
    <div
      className="rbt-input-multi form-control rbt-input"
      onClick={[Function]}
      onFocus={[Function]}
      tabIndex={-1}
    >
      <div
        className="rbt-input-wrapper"
      >
        <div
          style={
            {
              "display": "flex",
              "flex": 1,
              "height": "100%",
              "position": "relative",
            }
          }
        >
          <input
            aria-autocomplete="both"
            aria-expanded={false}
            aria-haspopup="listbox"
            aria-multiselectable={true}
            autoComplete="off"
            className="rbt-input-main"
            onBlur={[Function]}
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            role="combobox"
            style={
              {
                "backgroundColor": "transparent",
                "border": 0,
                "boxShadow": "none",
                "cursor": "inherit",
                "outline": "none",
                "padding": 0,
                "width": "100%",
                "zIndex": 1,
              }
            }
            type="text"
            value=""
          />
          <input
            aria-hidden={true}
            className="rbt-input-hint"
            readOnly={true}
            style={
              {
                "backgroundColor": "transparent",
                "borderColor": "transparent",
                "boxShadow": "none",
                "color": "rgba(0, 0, 0, 0.54)",
                "left": 0,
                "pointerEvents": "none",
                "position": "absolute",
                "top": 0,
                "width": "100%",
              }
            }
            tabIndex={-1}
            value=""
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders required for Boolean Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Boolean Attribute
  </label>
  <input
    attribute={
      {
        "readableName": "Boolean Attribute",
        "type": "boolean",
        "x-rhino-required": true,
      }
    }
    checked=""
    className="form-check-input"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="checkbox"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders required for Date Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Date Attribute
  </label>
  <div
    className="react-datepicker-wrapper d-block"
  >
    <div
      className="react-datepicker__input-container"
    >
      <input
        className="d-block form-control"
        disabled={false}
        id="test"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        readOnly={false}
        type="text"
        value=""
      />
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders required for DateTime Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    DateTime Attribute
  </label>
  <div
    className="react-datepicker-wrapper d-block"
  >
    <div
      className="react-datepicker__input-container"
    >
      <input
        className="d-block form-control"
        disabled={false}
        id="test"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        readOnly={false}
        type="text"
        value=""
      />
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders required for Decimal Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Decimal Attribute
  </label>
  <input
    aria-invalid={false}
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="number"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders required for Decimal Attribute Currency 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Decimal Attribute Currency
  </label>
  <div
    className="input-group"
  >
    <span
      className="input-group-text"
    >
      $
    </span>
    <input
      attribute={
        {
          "format": "currency",
          "readableName": "Decimal Attribute Currency",
          "type": "decimal",
          "x-rhino-required": true,
        }
      }
      className="form-control"
      id="test-123"
      onChange={[Function]}
      path="test"
      resource={
        {
          "test": "",
        }
      }
      type="text"
      value=""
    />
  </div>
</div>
`;

exports[`ModelFormField > renders required for Float Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Float Attribute
  </label>
  <input
    aria-invalid={false}
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="number"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders required for Float Attribute Currency 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Float Attribute Currency
  </label>
  <div
    className="input-group"
  >
    <span
      className="input-group-text"
    >
      $
    </span>
    <input
      attribute={
        {
          "format": "currency",
          "readableName": "Float Attribute Currency",
          "type": "float",
          "x-rhino-required": true,
        }
      }
      className="form-control"
      id="test-123"
      onChange={[Function]}
      path="test"
      resource={
        {
          "test": "",
        }
      }
      type="text"
      value=""
    />
  </div>
</div>
`;

exports[`ModelFormField > renders required for Integer Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Integer Attribute
  </label>
  <input
    aria-invalid={false}
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="number"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders required for Integer Attribute Select 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Integer Attribute Select
  </label>
  <select
    className="form-select"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    value={-1}
  >
    <option
      disabled={true}
      value={-1}
    >
      Integer Attribute Select...
    </option>
  </select>
</div>
`;

exports[`ModelFormField > renders required for Number Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Number Attribute
  </label>
  <input
    aria-invalid={false}
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="number"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders required for Number Attribute Currency 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Number Attribute Currency
  </label>
  <div
    className="input-group"
  >
    <span
      className="input-group-text"
    >
      $
    </span>
    <input
      attribute={
        {
          "format": "currency",
          "readableName": "Number Attribute Currency",
          "type": "number",
          "x-rhino-required": true,
        }
      }
      className="form-control"
      id="test-123"
      onChange={[Function]}
      path="test"
      resource={
        {
          "test": "",
        }
      }
      type="text"
      value=""
    />
  </div>
</div>
`;

exports[`ModelFormField > renders required for Phone Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Phone Attribute
  </label>
  <div
    className=" react-tel-input "
    onKeyDown={[Function]}
    style={{}}
  >
    <div
      className="special-label"
    >
      Phone
    </div>
    <input
      className="form-control "
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onCopy={[Function]}
      onDoubleClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="1 (702) 123-4567"
      style={{}}
      type="tel"
      value="+1"
    />
    <div
      className="flag-dropdown "
      style={{}}
    >
      <div
        aria-haspopup="listbox"
        className="selected-flag"
        onClick={[Function]}
        role="button"
        tabIndex="0"
        title="United States: + 1"
      >
        <div
          className="flag us"
        >
          <div
            className="arrow"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders required for Reference > Attachment Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Reference &gt; Attachment Attribute
  </label>
  <div
    className="rbt _typeahead_e2d666"
    style={
      {
        "outline": "none",
        "position": "relative",
      }
    }
    tabIndex={-1}
  >
    <div
      style={
        {
          "display": "flex",
          "flex": 1,
          "height": "100%",
          "position": "relative",
        }
      }
    >
      <input
        aria-autocomplete="both"
        aria-expanded={false}
        aria-haspopup="listbox"
        autoComplete="off"
        className="rbt-input-main form-control rbt-input"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        role="combobox"
        type="text"
        value=""
      />
      <input
        aria-hidden={true}
        className="rbt-input-hint"
        readOnly={true}
        style={
          {
            "backgroundColor": "transparent",
            "borderColor": "transparent",
            "boxShadow": "none",
            "color": "rgba(0, 0, 0, 0.54)",
            "left": 0,
            "pointerEvents": "none",
            "position": "absolute",
            "top": 0,
            "width": "100%",
          }
        }
        tabIndex={-1}
        value=""
      />
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders required for Reference Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Reference Attribute
  </label>
  <div
    className="rbt _typeahead_e2d666"
    style={
      {
        "outline": "none",
        "position": "relative",
      }
    }
    tabIndex={-1}
  >
    <div
      style={
        {
          "display": "flex",
          "flex": 1,
          "height": "100%",
          "position": "relative",
        }
      }
    >
      <input
        aria-autocomplete="both"
        aria-expanded={false}
        aria-haspopup="listbox"
        autoComplete="off"
        className="rbt-input-main form-control rbt-input"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        role="combobox"
        type="text"
        value=""
      />
      <input
        aria-hidden={true}
        className="rbt-input-hint"
        readOnly={true}
        style={
          {
            "backgroundColor": "transparent",
            "borderColor": "transparent",
            "boxShadow": "none",
            "color": "rgba(0, 0, 0, 0.54)",
            "left": 0,
            "pointerEvents": "none",
            "position": "absolute",
            "top": 0,
            "width": "100%",
          }
        }
        tabIndex={-1}
        value=""
      />
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders required for String > Enum Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    String &gt; Enum Attribute
  </label>
  <select
    aria-invalid={false}
    className="form-select"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    value={-1}
  >
    <option
      value="y"
    >
      y
    </option>
    <option
      value="n"
    >
      n
    </option>
    <option
      disabled={true}
      value={-1}
    >
      String &gt; Enum Attribute...
    </option>
  </select>
</div>
`;

exports[`ModelFormField > renders required for String Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    String Attribute
  </label>
  <input
    aria-invalid={false}
    attribute={
      {
        "readableName": "String Attribute",
        "type": "string",
        "x-rhino-required": true,
      }
    }
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="text"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders required for String Attribute 2`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    String Attribute
  </label>
  <input
    aria-invalid={false}
    attribute={
      {
        "readableName": "String Attribute",
        "type": "string",
        "x-rhino-required": true,
      }
    }
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="text"
    value=""
  />
</div>
`;

exports[`ModelFormField > renders required for Text Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Text Attribute
  </label>
  <textarea
    aria-invalid={false}
    attribute={
      {
        "readableName": "Text Attribute",
        "type": "text",
        "x-rhino-required": true,
      }
    }
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    value=""
  />
</div>
`;

exports[`ModelFormField > renders required for Time Attribute 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  >
    Time Attribute
  </label>
  <div
    className="react-datepicker-wrapper d-block"
  >
    <div
      className="react-datepicker__input-container"
    >
      <input
        className="d-block form-control"
        disabled={false}
        id="test"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        readOnly={false}
        type="text"
        value=""
      />
    </div>
  </div>
</div>
`;

exports[`ModelFormField > renders required for undefined 1`] = `
<div
  className="mb-3"
>
  <label
    checked={true}
    className="form-label required form-label"
    htmlFor="test"
  />
  <input
    aria-invalid={false}
    attribute={
      {
        "x-rhino-required": true,
      }
    }
    autoComplete="off"
    className="form-control"
    id="test-123"
    onChange={[Function]}
    path="test"
    resource={
      {
        "test": "",
      }
    }
    type="text"
    value=""
  />
</div>
`;
